%% SACCADIC PRECISION
% Marcello A. Maniglia, 2017-2019/10/28
%this script is part of the OculomotorStrategyToolkit (Maniglia, Visscher
%and Seitz, 2020) and it analyzes eyetracker data generated by the
%'PRL_test.m' to extract saccadic re-referencing as graphs and percentages
%of first absolute fixations after target presentation. Some changes can
%be made to modify some of the output.
%This analysis addresses the consistency of PRLs across trials by
%calculating the distribution of locations of the trial's first fixation
%that lands outside the scotoma. This fixation could therefore be the first
%fixation, the second, or the third, etc. and represents the first fixation
%during which the target can be seen. The measure of saccadic precision is
%then represented as the size of the BCEA fitted on these fixation
%positions. The BCEA is calculated to encompass a given proportion (P) of
%the overall number of fixations. Following previous studies (Chung, 2013a;
% Crossland et al., 2004; Kwon et al., 2013), we chose P=0.68. In plots of
%the individual saccade landing locations, we further visually distinguish
%?absolute? first fixations (i.e., first fixations outside the scotoma that
%happen to be the first fixation in the trial) with a different color from
%other fixations following initial fixations to the scotoma.

% some edits made by Elam Cutts 2/12/25 (ecutts99@uab.edu)
%

close all
addpath([cd '/Functions']);

if answer{2} == '1'
    BasePost = 'Pre';
elseif answer{2} == '2'
    BasePost = 'Post';
end

Directory =[SubjectDirectory{1,1} '\OculomotorFigures\SaccadicPrecision'];
mkdir(Directory);


firsttrial = 1;
totaltrial = length(TrialNum(6:end));

if exist('newEyeSummary')
    EyeSummary=newEyeSummary;

    % in case the eyetracker didn't work, we use eye data collected by a
    % different variable

    for ui = 1:totaltrial
        TrialNum = strcat('Trial',num2str(ui));
        EyeSummary.(TrialNum).FixationIndices = EyeSummary.(TrialNum).FixationIndices_updated;
    end
end

% define the duration of the fixation in seconds (default: .133s)
durationtocallfixation=.133;

% define duration of the fixation in frames (ifi = inter frame interval)
framestocallfixation=round(durationtocallfixation/ifi);

% define screen info, like the center of the screen and the limit of the
% screen

Xcenter = wRect(3)/2;
Ycenter = wRect(4)/2;

xlimit = Xcenter/pix_deg;
ylimit = Ycenter/pix_deg_vert;

% initialize the amount fo fixations the participant made
fixcounter = [];

%initialize heatmap

sampleX = (-xlimit:1:xlimit);
sampleY = (-ylimit:1:ylimit);
heatmatrix = zeros(length(sampleX), length(sampleY));


%% simulated scotoma: initialize the simulated scotoma region
radius = scotomadeg(1)/2; %radius of circular scotoma mask
[sx,sy] = meshgrid(-wRect(3)/2:wRect(3)/2,-wRect(4)/2:wRect(4)/2);
circlePixels = sx.^2 + sy.^2 <= radius.^2;

d = (circlePixels==1);
newfig = circlePixels;
circlePixels = newfig;
theta = 0;
theeccentricity_X_scotoma = 0;
theeccentricity_Y_scotoma = 0;

%% initialize graph

% Ellipse parameters to draw the scotoma on the graph.
t = linspace(0, 360,1000);
xAmplitude = scotomadeg/2; % horizontal axis + offset
yAmplitude = scotomadeg/2; % vertical axis + offset
x = xAmplitude * sind(t);
y = yAmplitude * cosd(t);
R  = [cos(theta) -sin(theta); ...
    sin(theta)  cos(theta)];
rCoords = R*[x ; y];
xr = rCoords(1,:)';
yr = rCoords(2,:)';
xx =xr+theeccentricity_X_scotoma/pix_deg;
yy =yr+theeccentricity_Y_scotoma/pix_deg;
%find the first available eye position after stimulus presentation
firstframetarget=[];

% initialize the count of the first fixations which fell outside
% the scotoma ('green' fixations in the graph)
greenDot = nan(totaltrial,1);
% initialize the count of the valid trials, which are those with
% at least one fixation outside the scotoma
valid_trials=nan(totaltrial,1);

for i=firsttrial:totaltrial

    %  if ismember(i,theArray)
    TrialNum = strcat('Trial',num2str(i));
    if length(EyeSummary.(TrialNum).FixationIndices)>1
        if EyeSummary.(TrialNum).FixationIndices(end,2)==0 % sometimes the end of the last fixation is missing so we assign the duration of the last element
            EyeSummary.(TrialNum).FixationIndices(end,2)=length(EyeSummary.(TrialNum).EyeData);
        end
    end

    FramesAfterTargetPresentation=find(EyeSummary.(TrialNum).EyeData(:,5)>=EyeSummary.(TrialNum).TimeStamps.Fixation(end));
    if length(FramesAfterTargetPresentation) > 0
        firstframetarget=[firstframetarget FramesAfterTargetPresentation(1) ];
        skipp(i)=1;
        %target coordinates (with respect to the center)
        Heatmap.(TrialNum).TargetX=EyeSummary.(TrialNum).TargetX*pix_deg;
        Heatmap.(TrialNum).TargetY=EyeSummary.(TrialNum).TargetY*pix_deg;

        tgt_x=Heatmap.(TrialNum).TargetX;
        tgt_y=Heatmap.(TrialNum).TargetY;

        Heatmap.(TrialNum).TargetXRespectToCenter=Xcenter+Heatmap.(TrialNum).TargetX;
        Heatmap.(TrialNum).TargetYRespectToCenter=Ycenter+Heatmap.(TrialNum).TargetY;

        counteroutsidescotoma=0;
        counterr=0;

        clear validFixationIndexes
        % fixations after target presentation
        validFixationIndexes=EyeSummary.(TrialNum).FixationIndices(EyeSummary.(TrialNum).FixationIndices(:,1)>FramesAfterTargetPresentation(1),:);

        ValidFixationsCounter{i}=validFixationIndexes;
        clear startValidFixationIndexes
        clear endValidFixationIndexes

        startValidFixationIndexes=[];
        endValidFixationIndexes=[];


        %fixations after enough time from target presentation that last
        %long enough (as much as specified above)
        if isempty(validFixationIndexes)==0
            for jid=1:length(validFixationIndexes(:,1))
                if validFixationIndexes(jid,2)-validFixationIndexes(jid,1)>=framestocallfixation  && validFixationIndexes(jid,1)>FramesAfterTargetPresentation(1)+10
                    startValidFixationIndexes=[startValidFixationIndexes validFixationIndexes(jid,1)];
                    endValidFixationIndexes=[endValidFixationIndexes validFixationIndexes(jid,2)];
                end
            end
        end

        startFirstValidFixationIndexes=[];
        endFirstValidFixationIndexes=[];

        % first fixation in the trial (that took place long enough after
        % target appearance)
        if isempty(validFixationIndexes)==0
            for jiid=1:length(validFixationIndexes(:,1))
                if validFixationIndexes(jiid,2)-validFixationIndexes(jiid,1)>=framestocallfixation && validFixationIndexes(jiid,1)>FramesAfterTargetPresentation(1)+10
                    startFirstValidFixationIndexes=validFixationIndexes(jiid,1);
                    endFirstValidFixationIndexes=validFixationIndexes(jiid,2);
                    break % break because we look for the first fixation per trial
                end
            end
        end

        if exist('startValidFixationIndexes')==1
            for ui=1:length(startValidFixationIndexes)

                EyeSummary.(TrialNum).FixationIndices(find(EyeSummary.(TrialNum).FixationIndices(:,1)==startValidFixationIndexes(ui)),1);
                %Reaction time fix
                RT_tgt=EyeSummary.(TrialNum).EyeData(FramesAfterTargetPresentation(1),5);

                % absolute eye position
                EyeX=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes(ui),1);
                EyeY=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes(ui),2);

                %  target location normalized by eye position
                diffx=((wRect(3)/2+tgt_x)-EyeX);
                diffy=((wRect(4)/2+tgt_y)-EyeY);

                counterr=1;
                valid_trials(i)=1;

                if round(wRect(3)/2+diffx)<=wRect(3) && round(wRect(4)/2+diffy)<=wRect(4) && round(wRect(3)/2+diffx)> 0 && round(wRect(4)/2+diffy)>0
                    %if eye position within the limit of the screen
                    if circlePixels(round(wRect(4)/2+diffy),round(wRect(3)/2+diffx))==0 && startValidFixationIndexes(ui)>FramesAfterTargetPresentation(1)
                        %if eye position outside the scotoma and after target presentation
                        counteroutsidescotoma=1;
                        RT_fix=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes(ui),5);

                        RT_first_saccade(i)=RT_fix-RT_tgt;
                        Heatmap.(TrialNum).OneFixationX(counteroutsidescotoma)=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes(ui),1);%/pix_deg;
                        Heatmap.(TrialNum).OneFixationY(counteroutsidescotoma)=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes(ui),2);%/pix_deg_vert;

                        beginningFix=startValidFixationIndexes(ui);
                        endFix=endValidFixationIndexes(ui);
                        LengthFirstfixation(i)=endFix-beginningFix;

                        whichfix(i)=ui;
                        totalnumberfix(i)=length(startValidFixationIndexes);

                        firstfr(i)=startFirstValidFixationIndexes;

                        if startValidFixationIndexes(ui)==startFirstValidFixationIndexes
                            %if the first useful fixation is also the first absolute fixation, it
                            %will be plotted as a green dot
                            greenDot(i)=1;
                        end
                        break
                    end
                end
            end

            if isfield(Heatmap.(TrialNum),'OneFixationX')
                Heatmap.(TrialNum).OneFixationXClean=Heatmap.(TrialNum).OneFixationX(Heatmap.(TrialNum).OneFixationX~=0);
                Heatmap.(TrialNum).OneFixationYClean=Heatmap.(TrialNum).OneFixationY(Heatmap.(TrialNum).OneFixationY~=0);

                RT_first_saccadeout(i)=RT_first_saccade(i);

                %remove nans
                Heatmap.(TrialNum).OneFixationXClean=Heatmap.(TrialNum).OneFixationXClean(~isnan(Heatmap.(TrialNum).OneFixationXClean));
                Heatmap.(TrialNum).OneFixationYClean=Heatmap.(TrialNum).OneFixationYClean(~isnan(Heatmap.(TrialNum).OneFixationYClean));



                % 'old way'
                %          offsetTarget.(TrialNum).FixationY=(Heatmap.(TrialNum).OneFixationYClean)-Heatmap.(TrialNum).TargetYRespectToCenter;
                %           offsetTarget.(TrialNum).FixationX=(Heatmap.(TrialNum).OneFixationXClean)-Heatmap.(TrialNum).TargetXRespectToCenter;


                offsetTarget.(TrialNum).FixationY=Heatmap.(TrialNum).TargetYRespectToCenter-(Heatmap.(TrialNum).OneFixationYClean);
                offsetTarget.(TrialNum).FixationX=Heatmap.(TrialNum).TargetXRespectToCenter-(Heatmap.(TrialNum).OneFixationXClean);

                %to account for uneven length of x and y array (sometimes
                %it happens)
                if length(offsetTarget.(TrialNum).FixationY)~=length(offsetTarget.(TrialNum).FixationX)

                    if length(offsetTarget.(TrialNum).FixationY)>length(offsetTarget.(TrialNum).FixationX)
                        offsetTarget.(TrialNum).FixationY=offsetTarget.(TrialNum).FixationY(1:length(offsetTarget.(TrialNum).FixationX));
                    elseif length(offsetTarget.(TrialNum).FixationY)<length(offsetTarget.(TrialNum).FixationX)
                        offsetTarget.(TrialNum).FixationX=offsetTarget.(TrialNum).FixationX(1:length(offsetTarget.(TrialNum).FixationY));
                    end
                end

                coordinates.(TrialNum).fix2tgt=[offsetTarget.(TrialNum).FixationX'  offsetTarget.(TrialNum).FixationY'];
                coordinates.(TrialNum).FixAbs=[(Heatmap.(TrialNum).OneFixationX)' (Heatmap.(TrialNum).OneFixationY)'];
                coordinates.(TrialNum).RelativeToCenter=coordinates.(TrialNum).fix2tgt;

                degX=(coordinates.(TrialNum).RelativeToCenter(1,1)/pix_deg);
                degY=(coordinates.(TrialNum).RelativeToCenter(1,2)/pix_deg_vert);
                fixcount=coordinates.(TrialNum).RelativeToCenter(1,:);
                fixcounter=[fixcounter;fixcount];
                clear fixcount
            end
        end
    else
        skipp(i)=0;
    end
end


%% Graph Making %%

figure

% prepare graph grid
line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
hold on
line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
hold on
viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
text(0,-6, '5^{\circ} ', 'FontSize', 20)
text(0,-11, '10^{\circ} ', 'FontSize', 20)
text(0,-16, '15^{\circ} ', 'FontSize', 20)

xlim([-25 25])
ylim([-25 25])
pbaspect([1 1 1]);


hold on
all_valid_trials=[];
for i=firsttrial:totaltrial
    TrialNum = strcat('Trial',num2str(i));
    if skipp(i)==1
        if isfield(Heatmap.(TrialNum),'OneFixationX')
            if isnan(greenDot(i))
                all_valid_trials=[all_valid_trials i];
                scatter((coordinates.(TrialNum).RelativeToCenter(1,1)/pix_deg),(coordinates.(TrialNum).RelativeToCenter(1,2))/pix_deg_vert, 30, [1 0 0], 'filled');
            elseif greenDot(i)==1
                all_valid_trials=[all_valid_trials i];
                scatter((coordinates.(TrialNum).RelativeToCenter(1,1)/pix_deg),(coordinates.(TrialNum).RelativeToCenter(1,2))/pix_deg_vert, 30, [0 1 0], 'filled');
            end
        end
        hold on
    end
end
set (gca,'YDir','reverse')

if ~isempty(fixcounter)
    %if we have at least one fixation that satisfies the conditions, then
    %we can plot them
    FixationsX=fixcounter(:,1)/pix_deg;
    FixationsY=fixcounter(:,2)/pix_deg_vert;
    AllFix=[FixationsX FixationsY];
end

hold on

trials_out=all_valid_trials';
cnt=1:totaltrial;
cnt2=ismember(valid_trials,cnt);
%trials counted in saccadic precision (both green and red)
all_trials=cnt(cnt2);
pointers=~ismember(all_trials, all_valid_trials);
%trials not counted in saccadic precision (never left scotoma)
trials_inside=all_trials(pointers);

usefultrials=(length(trials_out)/length(all_trials))*100;
percentscotoma=100-usefultrials;
if ~isempty(fixcounter)
    RT_saccadeNonzout=RT_first_saccadeout(RT_first_saccadeout~=0);
    averageRTout=mean(RT_saccadeNonzout);
    txt32=num2str(averageRTout);
    if length(txt32)>4
        txt32=txt32(1:5);
    end
    FixationsX=fixcounter(:,1)/pix_deg;
    FixationsY=fixcounter(:,2)/pix_deg_vert;
    data=[FixationsX FixationsY];
end

set (gca,'YDir','reverse')

title_two=['Saccadic Precision ' SUBJECT BasePost];
set(gca,'FontSize',26)
title(title_two)

ylabel('degrees of visual angle', 'fontsize', 26);
xlabel('degrees of visual angle', 'fontsize', 26);

pbaspect([1 1 1]);

if ~isempty(fixcounter)
    ellli=cov(FixationsX,FixationsY);
    data=[FixationsX FixationsY];
    checkBCEA=0;
    try
        error_ellipsenofigure(ellli, mean(data), .68)
        % error_ellipse(ellli, mean(data), .68)

        [eigenvec, eigenval ] = eig(ellli);
        d=sqrt(eigenval);
        areaEll=pi*d(1)*d(4)  ;
        areaEllarcmin=3600*areaEll;
        caption=round(areaEllarcmin)/3600;
        thetaM=rad2deg(acos(eigenvec(1,1)));
        txt10=num2str(caption);
        if caption>10
            txt10=txt10(1:5);
        else
            txt10=txt10(1:4);
        end
        checkBCEA=1;
        [ux, uy, uz, uk]=extract_error_ellipse(ellli, mean(data), .68);
    end
end
%hold on
%plot(ux, uy)
if exist('d') && exist('uk')
    hold on; plot((uk*ux)+mean(data(:,1)),(uk*uy)+mean(data(:,2)), 'b','LineWidth',1.5);
end

print([Directory SUBJECT BasePost ' BCEAnonrmc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI

if ~isempty(fixcounter)
    if exist('txt10')
    text(-6,11, ['BCEA= ' txt10, ' deg^{' num2str(2) '}'], 'FontSize', 20)
    end
    text(-6,14, ['Saccade Latency= ' txt32, ' sec'], 'FontSize', 20)
end


print([Directory SUBJECT BasePost ' BCEA_latencynormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI


usefultrials=(length(trials_out)/length(all_trials))*100;
txt312=num2str(usefultrials);
text(-6,17, ['Useful trials= ' txt312, '%'], 'FontSize', 20)
print([Directory SUBJECT BasePost ' BCEA_latency_usefulnormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI


%% RELEVANT Scores of this Function %%

if exist('caption')==0
    caption=NaN;
end
if exist('averageRTout')==0
    averageRTout=NaN;
end
if exist('usefultrials')==0
    usefultrials=NaN;
end

saccadicPrecision=caption;
SaccadeLatency=averageRTout;
usefulTrials=usefultrials;

summaryDataSPLUT.(SUBJECT).saccadicPrecision(str2double(answer{2}))=caption;
summaryDataSPLUT.(SUBJECT).SaccadeLatency(str2double(answer{2}))=averageRTout;
summaryDataSPLUT.(SUBJECT).usefulTrials(str2double(answer{2}))=usefultrials;


save([Directory 'summaryDataSPLUT.mat'],"summaryDataSPLUT");