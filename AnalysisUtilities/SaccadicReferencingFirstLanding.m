%% SACCADIC RE-REREFERENCING
% Marcello A. Maniglia, 2017-2019/10/28
%this script analyzes eyetracker data generated by the 'PRL_test.m' script
%and outputs saccadic re-referencing as graphs and percentages of first
%absolute fixations after target presentation and Latency of target
%acquisition.
%Saccadic Re-referencing reflects how often participants immediately see
%the target. It is the proportion of trials where the end point of the first
%saccade puts the target outside scotoma. The green dots represent first
%fixations in each trial that successfully placed the target outside the
%scotoma.
%Latency of Target Acquisition reflects how long it takes to observe the
%target. It is the mean time until the target is visible outside scotoma.

%%
close all
addpath('Functions');

if answer{2} == '1'
    BasePost = 'Pre';
elseif answer{2} == '2'
    BasePost = 'Post';
end

Directory = fullfile([SubjectDirectory{1,1} '\OculomotorFigures\SaccadicRereferencing\']);
mkdir(Directory);

firsttrial=1;
totaltrial=length(mixtr);


% in some data files ran with the older code, the eyetracker timing is not
% aligned with the PTB events. Lines below take care of that
if exist('newEyeSummary')
    EyeSummary=newEyeSummary;

% in case the eyetracker didn't work, we use eye data collected by a
% different variable
for ui=1:totaltrial
    TrialNum = strcat('Trial',num2str(ui));
    EyeSummary.(TrialNum).FixationIndices=EyeSummary.(TrialNum).FixationIndices_updated;
end

end

% replace the default 'no eye data' value from Vpixx ('33727') with nan
for ui=1:totaltrial
    TrialNum = strcat('Trial',num2str(ui));
    for uii=1:length(EyeSummary.(TrialNum).EyeData)       
        if EyeSummary.(TrialNum).EyeData(uii,1)==33727
            EyeSummary.(TrialNum).EyeData(uii,1:2)=nan;
        end
    end
end

%define the duration of the fixation in seconds (default: .133s)
durationtocallfixation=.133;
%duration of the fixation in frames (ifi = inter frame interval)
framestocallfixation=round(durationtocallfixation/ifi);

%screen info
Xcenter=wRect(3)/2;
Ycenter=wRect(4)/2;

%initialize fixation counter
fixcounter=[];
fixcounter_inside=[]; % counter of fixations inside the scotoma
arrayInside=[];
counterInside=nan(totaltrial,1); % counter of fixations inside
counterOutside=nan(totaltrial,1); % counter of fixations outside
firstframetarget=[];


xlimit=Xcenter/pix_deg; % pix_deg info are stored in the data files
ylimit=Ycenter/pix_deg_vert;

%initialize heatmap
sampleX=(-xlimit:1:xlimit);
sampleY=(-ylimit:1:ylimit);
heatmatrix= zeros(length(sampleX), length(sampleY));

%% simulated scotoma: initialize the simulated scotoma region
radius = scotomasize(1)/2; %radius of circular scotoma mask
[sx,sy]=meshgrid(-wRect(3)/2:wRect(3)/2,-wRect(4)/2:wRect(4)/2);
circlePixels=sx.^2 + sy.^2 <= radius.^2;

d=(circlePixels==1);
newfig=circlePixels;
circlePixels=newfig;


%% initialize graph
% Ellipse parameters to draw the scotoma on the graph.
t = linspace(0, 360,1000);
xAmplitude = scotomadeg/2; % horizontal axis + offset
yAmplitude = scotomadeg/2; % vertical axis + offset
x = xAmplitude * sind(t);
y = yAmplitude * cosd(t);
R  = [cos(t) -sin(t); ...
    sin(t)  cos(t)];
rCoords = R.*[x  y];
xr = rCoords(1,:)';
yr = rCoords(2,:)';
xx=xr+theeccentricity_X/pix_deg;
yy=yr+theeccentricity_Y/pix_deg;

% prepare graph grid
line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
hold on
line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
hold on
viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
text(0,-6, '5^{\circ} ', 'FontSize', 20)
text(0,-11, '10^{\circ} ', 'FontSize', 20)
text(0,-16, '15^{\circ} ', 'FontSize', 20)

set (gca,'YDir','reverse')
xlim([-25 25])
ylim([-25 25])


% extract info from eye movement data

for i=firsttrial:totaltrial
 
 % if ismember(i,theArray)
     TrialNum = strcat('Trial',num2str(i));
    

    %find the first available eye position after stimulus presentation
    FramesAfterTargetPresentation=find(EyeSummary.(TrialNum).EyeData(:,5)>=EyeSummary.(TrialNum).TimeStamps.Fixation(end));
    
    
    if length(FramesAfterTargetPresentation)>0 %at least one valid frame after target presentation
                countFix(i)=sum(EyeSummary.(TrialNum).EyeData(FramesAfterTargetPresentation,6)==1);

        validFrameCounter(i)=1; % count whether there is at least one valid frame in trial i
        firstframetarget=[firstframetarget FramesAfterTargetPresentation(1) ];
        
        Heatmap.(TrialNum).TargetX=EyeSummary.(TrialNum).TargetX*pix_deg; % target location x
        Heatmap.(TrialNum).TargetY=EyeSummary.(TrialNum).TargetY*pix_deg; % target location y
        
        tgt_y=Heatmap.(TrialNum).TargetY;
        tgt_x=Heatmap.(TrialNum).TargetX;
        
        Heatmap.(TrialNum).TargetXRespectToCenter=Xcenter+Heatmap.(TrialNum).TargetX; % target location x with respect to the center
        Heatmap.(TrialNum).TargetYRespectToCenter=Ycenter+Heatmap.(TrialNum).TargetY; % target location y with respect to the center
        if length(EyeSummary.(TrialNum).FixationIndices)>1
            if EyeSummary.(TrialNum).FixationIndices(end,2)==0 % sometimes the end of the last fixation is missing so we assign the duration of the last element
                EyeSummary.(TrialNum).FixationIndices(end,2)=length(EyeSummary.(TrialNum).EyeData);
            end
        end
        
        counteroutsidescotoma=0;
        
        clear validFixationIndexes
        %collect fixation indexes from eye summary structure that happened
        %after target presentation
        validFixationIndexes=EyeSummary.(TrialNum).FixationIndices(EyeSummary.(TrialNum).FixationIndices(:,1)>FramesAfterTargetPresentation(1),:);
        
        countervalidFixationIndexes{i}=validFixationIndexes;
        clear startValidFixationIndexes
        
        %consider only fixation intervals long enough to be called a
        %fixation
        startValidFixationIndexes=[];
        endValidFixationIndexes=[];
        if isempty(validFixationIndexes)==0
            % first and last frame of the valid fixations
            for jid=1:length(validFixationIndexes(:,1))
                % select the first fixation that is long enough to be
                % called a fixation
                if validFixationIndexes(jid,2)-validFixationIndexes(jid,1)>=framestocallfixation && validFixationIndexes(jid,1)>FramesAfterTargetPresentation(1)+10
                    startValidFixationIndexes=validFixationIndexes(jid,1);
                    endValidFixationIndexes=validFixationIndexes(jid,2);
                    break % we break when we have found the first fixation per trial that satisfies our needs
                end
            end
        end
        
        if isempty(startValidFixationIndexes)==0 %if we have one valid fixation
            
            FirstFrameFix(i)=startValidFixationIndexes; % we take the beginning frame
            LastFrameFix(i)=endValidFixationIndexes; % we take the end frame
            LengthFirstfixation(i)=endValidFixationIndexes-startValidFixationIndexes; % we calculate the fixation duration
            EyeSummary.(TrialNum).FixationIndices(find(EyeSummary.(TrialNum).FixationIndices(:,1)==startValidFixationIndexes),1);
            
            %Reaction time fix
            RT_tgt=EyeSummary.(TrialNum).EyeData(FramesAfterTargetPresentation(1),5);
            RT_fix=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,5);
            
            RT_first_saccade(i)=RT_fix-RT_tgt;
            % absolute eye position
            EyeX=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,1);
            EyeY=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,2);
                        %  eye position normalized by target location
      %      diffx=EyeX-(wRect(3)/2+tgt_x);
       %     diffy=EyeY-(wRect(4)/2+tgt_y);
            
                                    %  target location normalized by eye position 
            diffx=((wRect(3)/2+tgt_x)-EyeX);
            diffy=((wRect(4)/2+tgt_y)-EyeY);
            
            %if fixation within the boundaries of the screen
            if round(wRect(3)/2+diffx)<=wRect(3) && round(wRect(4)/2+diffy)<=wRect(4) && round(wRect(3)/2+diffx)> 0 && round(wRect(4)/2+diffy)>0
                %if fixation outside scotoma
                if circlePixels(round(wRect(4)/2+diffy),round(wRect(3)/2+diffx))==0
                    counteroutsidescotoma=1;
                    Heatmap.(TrialNum).OneFixationX(counteroutsidescotoma)=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,1);%/pix_deg;
                    Heatmap.(TrialNum).OneFixationY(counteroutsidescotoma)=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,2);%/pix_deg_vert;
                    counterOutside(i)=2;
                    counterAll(i)=2;
                    %if fixation inside scotoma
                elseif circlePixels(round(wRect(4)/2+diffy),round(wRect(3)/2+diffx))==1
                    insidecntr=1;
                    counterAll(i)=1;
                    counterInside(i)=1;
                    Heatmap.(TrialNum).OneFixationXinside(insidecntr)=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,1);%/pix_deg;
                    Heatmap.(TrialNum).OneFixationYinside(insidecntr)=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes,2);%/pix_deg_vert;
                end
            else
            end
            
            if isfield(Heatmap.(TrialNum),'OneFixationX')
                if isnan(Heatmap.(TrialNum).OneFixationX)
                    Heatmap.(TrialNum).OneFixationX=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes-2,1);%/pix_deg;
                end
                if isnan(Heatmap.(TrialNum).OneFixationY)
                    Heatmap.(TrialNum).OneFixationY=EyeSummary.(TrialNum).EyeData(startValidFixationIndexes-2,2);%/pix_deg;
                end
                Heatmap.(TrialNum).OneFixationXClean=Heatmap.(TrialNum).OneFixationX(Heatmap.(TrialNum).OneFixationX~=0);
                Heatmap.(TrialNum).OneFixationYClean=Heatmap.(TrialNum).OneFixationY(Heatmap.(TrialNum).OneFixationY~=0);
                
                RT_first_saccadeout(i)=RT_first_saccade(i);
                
                %remove nans
                Heatmap.(TrialNum).OneFixationXClean=Heatmap.(TrialNum).OneFixationXClean(~isnan(Heatmap.(TrialNum).OneFixationXClean));
                Heatmap.(TrialNum).OneFixationYClean=Heatmap.(TrialNum).OneFixationYClean(~isnan(Heatmap.(TrialNum).OneFixationYClean));
                
                
                % 'old way'
      %          offsetTarget.(TrialNum).FixationY=(Heatmap.(TrialNum).OneFixationYClean)-Heatmap.(TrialNum).TargetYRespectToCenter;
      %           offsetTarget.(TrialNum).FixationX=(Heatmap.(TrialNum).OneFixationXClean)-Heatmap.(TrialNum).TargetXRespectToCenter;
                             
                offsetTarget.(TrialNum).FixationY=Heatmap.(TrialNum).TargetYRespectToCenter-(Heatmap.(TrialNum).OneFixationYClean);
                offsetTarget.(TrialNum).FixationX=Heatmap.(TrialNum).TargetXRespectToCenter-(Heatmap.(TrialNum).OneFixationXClean);
                
                if length(offsetTarget.(TrialNum).FixationY)~=length(offsetTarget.(TrialNum).FixationX)                   
                    if length(offsetTarget.(TrialNum).FixationY)>length(offsetTarget.(TrialNum).FixationX)
                        offsetTarget.(TrialNum).FixationY=offsetTarget.(TrialNum).FixationY(1:length(offsetTarget.(TrialNum).FixationX));
                    elseif length(offsetTarget.(TrialNum).FixationY)<length(offsetTarget.(TrialNum).FixationX)
                        offsetTarget.(TrialNum).FixationX=offsetTarget.(TrialNum).FixationX(1:length(offsetTarget.(TrialNum).FixationY));
                    end
                end
                
                coordinates.(TrialNum).RelativeToCenter=[offsetTarget.(TrialNum).FixationX'  offsetTarget.(TrialNum).FixationY'];
                %   coordinates.(TrialNum).FixAbs=[(Heatmap.(TrialNum).OneFixationX)' (Heatmap.(TrialNum).OneFixationY)']
                
                scatter((coordinates.(TrialNum).RelativeToCenter(1,1)/pix_deg),(coordinates.(TrialNum).RelativeToCenter(1,2))/pix_deg_vert, 30, [0 1 0], 'filled');
                hold on                
                degX=(coordinates.(TrialNum).RelativeToCenter(1,1)/pix_deg);
                degY=(coordinates.(TrialNum).RelativeToCenter(1,2)/pix_deg_vert);
              
                for iii=2:length(sampleX)
                    for dd=2:length(sampleY)
                        
                        if degX<=sampleX(iii) && degX>=sampleX(iii-1) && degY<=sampleY(dd) && degY>=sampleY(dd-1)
                            heatmatrix(iii-1,dd-1)=heatmatrix(iii-1,dd-1)+1;
                        end
                    end
                end
                
                fixcount=coordinates.(TrialNum).RelativeToCenter(1,:);               
                fixcounter=[fixcounter;fixcount];
                clear fixcount
                hold on                
            end
            
            if isfield(Heatmap.(TrialNum),'OneFixationXinside')
                Heatmap.(TrialNum).OneFixationXCleaninside=Heatmap.(TrialNum).OneFixationXinside(Heatmap.(TrialNum).OneFixationXinside~=0);
                Heatmap.(TrialNum).OneFixationYCleaninside=Heatmap.(TrialNum).OneFixationYinside(Heatmap.(TrialNum).OneFixationYinside~=0);
                
                RT_first_saccadein(i)=RT_first_saccade(i);
                                % 'old way'
%                offsetTarget.(TrialNum).FixationYinside=(Heatmap.(TrialNum).OneFixationYCleaninside)-Heatmap.(TrialNum).TargetYRespectToCenter;
 %               offsetTarget.(TrialNum).FixationXinside=(Heatmap.(TrialNum).OneFixationXCleaninside)-Heatmap.(TrialNum).TargetXRespectToCenter;
                             
                  offsetTarget.(TrialNum).FixationYinside=Heatmap.(TrialNum).TargetYRespectToCenter-Heatmap.(TrialNum).OneFixationYCleaninside;
                offsetTarget.(TrialNum).FixationXinside=Heatmap.(TrialNum).TargetXRespectToCenter-Heatmap.(TrialNum).OneFixationXCleaninside;
              
                coordinates.(TrialNum).RelativeToCenterinside=[offsetTarget.(TrialNum).FixationXinside'  offsetTarget.(TrialNum).FixationYinside'];
                %     coordinates.(TrialNum).FixAbsinside=[(Heatmap.(TrialNum).OneFixationXinside)' (Heatmap.(TrialNum).OneFixationYinside)']
                
                scatter((coordinates.(TrialNum).RelativeToCenterinside(1,1)/pix_deg),(coordinates.(TrialNum).RelativeToCenterinside(1,2))/pix_deg_vert, 30, [1 0 0], 'filled');
                hold on
                degXinside=(coordinates.(TrialNum).RelativeToCenterinside(1,1)/pix_deg);
                degYinside=(coordinates.(TrialNum).RelativeToCenterinside(1,2)/pix_deg_vert);
                arrayInside=[arrayInside i];
            end
            if isfield(Heatmap.(TrialNum),'OneFixationXinside')
                fixinside=coordinates.(TrialNum).RelativeToCenterinside(1,:);
                fixcounter_inside=[fixcounter_inside;fixinside];
                clear fixinside
            end
            clear fixcount
            hold on
        end
    else
                validFrameCounter(i)=99; % no valid frame in trial i 

    end
end


if isempty(fixcounter)==0
    FixationsX=fixcounter(:,1)/pix_deg;
    FixationsY=fixcounter(:,2)/pix_deg_vert;
    AllFix=[FixationsX FixationsY];
end

if isempty(fixcounter_inside)==0
    FixationsXinside=fixcounter_inside(:,1)/pix_deg;
    FixationsYinside=fixcounter_inside(:,2)/pix_deg_vert;
    AllFixinside=[FixationsXinside FixationsYinside];
end

hold on

if isempty(fixcounter)==0
    RT_saccadeNonzout=RT_first_saccadeout(RT_first_saccadeout~=0);
    averageRTout=mean(RT_saccadeNonzout);
    txt32=num2str(averageRTout);
    if length(txt32)==3
        txt32=txt32(1:3);
    elseif length(txt32)==2
        txt32=txt32(1:2);
    elseif length(txt32)==4
        txt32=txt32(1:4);
    else
        txt32=txt32(1:5);
    end
end

if exist('RT_first_saccadein')
    RT_saccadeNonzin=RT_first_saccadein(RT_first_saccadein~=0);
    averageRTin=mean(RT_saccadeNonzin);
    txt22=num2str(averageRTin);
    
    if length(txt22)>5
        txt22=txt22(1:5);
    end
    
    RT_saccadeNonz=RT_first_saccade(RT_first_saccade~=0);
    averageRT=mean(RT_saccadeNonz);
    txt12=num2str(averageRT);
    txt12=txt12(1:5);
end

data=[];
if isempty(fixcounter)==0
    FixationsX=fixcounter(:,1)/pix_deg;
    FixationsY=fixcounter(:,2)/pix_deg_vert;
    data=[FixationsX FixationsY];
end
if exist('FixationsXinside')
    data2=[FixationsXinside FixationsYinside];
    
    percentage=size(data2,1)/(size(data2,1)+size(data,1))*100;
    
    tuttefix=(size(data2,1)+size(data,1));
    percentage=100-percentage;
    
    txt11=num2str(percentage);
    if length(txt11)==3
        txt11=txt11(1:3);
    elseif length(txt11)==2
        txt11=txt11(1:2);
    end
end

set(gca, 'FontName', 'Arial')
set(gca,'FontSize',26)
title([SUBJECT BasePost ' fixation distribution']);


ylabel('degrees of visual angle', 'fontsize', 28);
xlabel('degrees of visual angle', 'fontsize', 28);
xlim([-25 25])
ylim([-25 25])
%grid on
%pbaspect([1.5 1 1]);
pbaspect([1 1 1]);

%  print([name '_fixationdistribution'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI


hold on


if exist('data') && exist('data2')
    data3=[ data;data2];
    ellli=cov(data3(:,1),data3(:,2));
end

if exist('data') && exist('data2')==0
    data3=[data];
if isempty(data)==0
ellli=cov(data3(:,1),data3(:,2));
end
end

if exist('data2') && exist('data')==0
    data3=[data2];
    ellli=cov(data3(:,1),data3(:,2));
end

print([Directory SUBJECT BasePost '_fixationdistributionnormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI

checkBCEA=0;
clear d
try
    %  error_ellipsenofigure(ellli, mean(data3), .68)
    [eigenvec, eigenval ] = eig(ellli);
    d=sqrt(eigenval);
    areaEll=pi*d(1)*d(4)  ;
    areaEllarcmin=3600*areaEll;
    caption=round(areaEllarcmin)/3600;
    thetaM=rad2deg(acos(eigenvec(1,1)));
    txt10=num2str(caption);
    if caption>10
        txt10=txt10(1:5);
    elseif caption<=10 && caption>0
        txt10=txt10(1:4);
    end
    checkBCEA=1;
    [ux, uy, uz, uk]=extract_error_ellipse(ellli, mean(data3), .68);
end
%hold on
%plot(ux, uy)
if exist('d') && sum(sum(d))~=0 && exist('uk')
hold on; plot((uk*ux)+mean(data3(:,1)),(uk*uy)+mean(data3(:,2)), 'b','LineWidth',1.5);
end
%set(h1,'zdata',uz+1)
if exist('txt11')
    if length(txt11)>4
        txt11=txt11(1:4);
    end
    text(11,16, [ txt11, '% fixations'], 'FontSize', 20)
    text(11,18.2, ['outside scotoma'], 'FontSize', 20)
end
if exist('txt11')
    text(11,21, ['RT in= ' txt22, ' s'], 'FontSize', 20)
end
if isempty(fixcounter)==0
    text(11,23.5, ['RT out= ' txt32, ' s'], 'FontSize', 20)
end
if exist('txt10')
text(11,12.75, ['BCEA= ' txt10, ' deg^{' num2str(2) '}'], 'FontSize', 20)
end
print([Directory SUBJECT BasePost '_fixationdistributionBCEAnormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI


figure

% prepare graph grid
line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
hold on
line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
hold on
viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
text(0,-6, '5^{\circ} ', 'FontSize', 20)
text(0,-11, '10^{\circ} ', 'FontSize', 20)
text(0,-16, '15^{\circ} ', 'FontSize', 20)

set (gca,'YDir','reverse')


if isempty(data3)==0
    scatter(data3(:,1), data3(:,2), 30, [0 0 1], 'filled');
end
set(gca, 'FontName', 'Arial')
%set (gca,'YDir','reverse')

set(gca,'FontSize',26)
title([SUBJECT BasePost ' landing BCEA']);


if checkBCEA==1
    text(11,11, ['BCEA= ' txt10, ' deg^{' num2str(2) '}'], 'FontSize', 20)
    
end

ylabel('degrees of visual angle', 'fontsize', 28);
xlabel('degrees of visual angle', 'fontsize', 28);

xlim([-25 25])
ylim([-25 25])
pbaspect([1 1 1]);

print([Directory SUBJECT BasePost '_landingBCEAnormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI



figure
% prepare graph grid
line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
hold on
line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
hold on
viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
text(0,-6, '5^{\circ} ', 'FontSize', 20)
text(0,-11, '10^{\circ} ', 'FontSize', 20)
text(0,-16, '15^{\circ} ', 'FontSize', 20)

set (gca,'YDir','reverse')
xlim([-25 25])
ylim([-25 25])


hold on

% BCEA calculation
dens=std(data3)/length(data3)^(1/10);
npern=512;
MAX=max(data3,[],1); MIN=min(data3,[],1); Range=MAX-MIN;
MAX_XY=MAX+Range/4; MIN_XY=MIN-Range/4;

try
    [bandwidth,density,X,Y]=kde2d_mm(data3,npern,MAX_XY,MIN_XY,dens);
    
    % plot the data and the density estimate
    contour3(X,Y,density,50), hold on
    %plot(data3(:,1),data3(:,2),'r.','MarkerSize',5)
    view(2)
    pbaspect([1 1 1]);
    set(gca, 'FontName', 'Arial')
    %set (gca,'YDir','reverse')
    
    set(gca,'FontSize',26)
    title([SUBJECT BasePost ' landing kernel']);
    hold on
    ylabel('degrees of visual angle', 'fontsize', 28);
    xlabel('degrees of visual angle', 'fontsize', 28);
    hold on
    
    %text(11,11, ['BCEA= ' txt10, ' deg^{' num2str(2) '}'], 'FontSize', 20)
    
    xlim([-25 25])
    ylim([-25 25])
    %xlim([(-(wRect(3)/2)/pix_deg)*1.2 ((wRect(3)/2)/pix_deg)*1.2 ]);
    %ylim([(-(wRect(4)/2)/pix_deg_vert)*1.2 ((wRect(4)/2)/pix_deg_vert)*1.2]);
    
    print([Directory SUBJECT BasePost 'landing_kernelnormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI
end


outside_array=[(1:totaltrial)' counterOutside];
inside_array=[(1:totaltrial)' counterInside];

trials_inside=inside_array(inside_array(:,2)==1);
trials_outside=outside_array(outside_array(:,2)==2);

%%
%outside only
if isempty(fixcounter)==0
    figure
    set(gca,'FontSize',26)
    % prepare graph grid
    line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
    hold on
    line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
    hold on
    viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
    viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
    viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
    text(0,-6, '5^{\circ} ', 'FontSize', 20)
    text(0,-11, '10^{\circ} ', 'FontSize', 20)
    text(0,-16, '15^{\circ} ', 'FontSize', 20)

    set (gca,'YDir','reverse')
    hold on
    
    scatter((fixcounter(:,1)/pix_deg),fixcounter(:,2)/pix_deg_vert, 30, [0 1 0], 'filled');
    hold on
    
    ylabel('degrees of visual angle', 'fontsize', 28);
    xlabel('degrees of visual angle', 'fontsize', 28);
    xlim([-25 25])
    ylim([-25 25])
    
    title([SUBJECT BasePost ' outside only']);
    
    %grid on
    pbaspect([1 1 1]);
    
    print([Directory SUBJECT BasePost 'outsideonlynormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI
end

%inside only

if isempty(fixcounter_inside)==0
    figure
    % prepare graph grid
    line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
    hold on
    line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
    hold on
    viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
    viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
    viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
    text(0,-6, '5^{\circ} ', 'FontSize', 20)
    text(0,-11, '10^{\circ} ', 'FontSize', 20)
    text(0,-16, '15^{\circ} ', 'FontSize', 20)

    set (gca,'YDir','reverse')
    xlim([-25 25])
    ylim([-25 25])
    
    scatter(fixcounter_inside(:,1)/pix_deg,fixcounter_inside(:,2)/pix_deg_vert, 30, [1 0 0], 'filled');
    hold on
    ylabel('degrees of visual angle', 'fontsize', 28);
    xlabel('degrees of visual angle', 'fontsize', 28);
    
    set(gca,'FontSize',26)
    title([SUBJECT BasePost ' inside only']);
    pbaspect([1 1 1]);
    print([Directory SUBJECT BasePost 'insideonlynormc'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI    
    matrixinside=[arrayInside' fixcounter_inside];
end

%% the relevant scores of this function are:
if exist('percentage')==0
    percentage=NaN;
end

if exist('caption')==0
    caption=NaN;
end
saccadicRereferencing=percentage;
FirstSaccadeLandingLocation=caption;

    sNum = strcat(SUBJECT);

summaryDataSRFL.(SUBJECT).saccadicRereferencing(str2double(answer{2}))=percentage;

summaryDataSRFL.(SUBJECT).FirstSaccadeLandingLocation(str2double(answer{2}))=caption;

save([Directory 'summaryDataSRFL.mat'],"summaryDataSRFL");
